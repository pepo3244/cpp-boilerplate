# インデント幅
IndentWidth: 4

# タブを使用するか
UseTab: Always
# タブ幅
TabWidth: 4

# columnの制限
ColumnLimit: 0

# 改行設定
BreakBeforeBraces: Custom
BraceWrapping:
  AfterCaseLabel: true
  AfterClass: true
  AfterControlStatement: true
  AfterStruct: true
  AfterEnum: true
  AfterFunction: true
  BeforeElse: true
  BeforeLambdaBody: true
  BeforeCatch: true
  BeforeWhile: true

# includeのソート
SortIncludes: CaseInsensitive
# includeブロックのソートをどうするか
IncludeBlocks: Preserve

#################################################
# preprocessor

# プリプロセッサ命令をインデントするか
IndentPPDirectives: AfterHash # ハッシュ後をインデント

#################################################
# control statement

# switchのcaseの中のブロックをインデントするか
IndentCaseBlocks: false
# switchのcaseラベルをインデントするか
IndentCaseLabels: true

# gotoのラベルをインデントするか
IndentGotoLabels: false

#################################################
# variables

# ポインタと参照の位置
PointerAlignment: Left

#################################################
# function

# 短い関数を一行にまとめるか
AllowShortFunctionsOnASingleLine: None

#################################################
# namespace

# 名前空間の終わりのかっこにコメントを追加する
FixNamespaceComments: true
# 何行で終わりかっこにコメントを追加するか
ShortNamespaceLines: 0

#################################################
# class

# アクセス指定子をインデントするか
IndentAccessModifiers: false
# アクセス指定子のインデントの幅
AccessModifierOffset: -4

# コンストラクタのメンバ初期化の改行位置
BreakConstructorInitializers: BeforeComma

# コンストラクタの初期化を一行にまとめるかそれぞれの行にするか
ConstructorInitializerAllOnOneLineOrOnePerLine: false

# クラスの継承のベースクラスの改行位置
BreakInheritanceList: BeforeComma

#################################################
# operators

# 演算子の改行方法
BreakBeforeBinaryOperators: NonAssignment # 演算子後に改行

# 長い文字列を分割するか
# "veryverylongtext"
# これを
# "veryvery"
# "longtext"
# こんな感じに
BreakStringLiterals: false

#################################################
# lambda

# 短いラムダ式を一行にまとめるか
AllowShortLambdasOnASingleLine: None

#################################################
# binpack

# falseだと引数が複数行の時に引数ごとに改行される
BinPackArguments: false
BinPackParameters: false
